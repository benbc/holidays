What is a database?
     Computer program for storing and retrieving information
     Lots of computer systems have databases at their core
     Game engines
          Unreal engine: UT, Fortnite, Deus Ex, Borderlands, Mass Effect

Examples
        Library
        Contacts
        Climate records
        Websites?

Different types of information
          Structure of the data
          How you retrieve it
          Different types of data model
          Different query languages, storage

Graph database
     All about relationships
     Terminology (nodes, relationships)
     Examples of graphs
              Road network
              Delivery companies
              Retail, Amazon recommendations
              Disease
     Add graphs to examples above

Neo4j
        Run Browser
        bit.ly/2PQFanl

Simple graph building
     Draw everything as pictures on the board
     Keep glossary as you go
     Introduce Cypher patterns as ascii-art

CREATE (:Person {name: "Ben Butler-Cole", age: 44})
MATCH (me:Person {name: "Ben Butler-Cole"}) RETURN me.age
MATCH (p:Person) return p.name

     Check what towns people are from for duplicates (Derby, Uttoxeter, Burton okay)

CREATE (:Town {name: "Plymouth"})
MATCH (t:Town {name: "Plymouth"}) RETURN t

     For people who see more than one result
          MATCH (t:Town {name: "Plymouth"}) DELETE t
          MERGE (:Town {name: "Plymouth"})

MATCH (t:Town {name: "Plymouth"}), (p:Person {name: "Ben Butler-Cole"})
CREATE (p)-[:LIVES]->(t)

MATCH (c:Country {name: "United Kingdom"}) RETURN c

MATCH (t:Town {name: "Plymouth"}), (c:Country {name: "United Kingdom"})
MERGE (t)-[:IN]->(c)

MATCH (:Person {name: "Ben Butler-Cole"})-[:LIVES]->(t:Town) RETURN t.name
MATCH (:Town {name: "Plymouth"})<-[:LIVES]-(p:Person) RETURN p.name
MATCH (:Person {name: "Ben Butler-Cole"})-[:LIVES]->(:Town)<-[:LIVES]-(p:Person) RETURN p.name

MATCH (:Country {name: "United Kingdom"})<-[:IN]-(t:Town)<-[:LIVES]-(p:Person)
WITH t.name as town, collect(p.name) as inhabitants
RETURN town, inhabitants ORDER BY size(inhabitants) DESC
     
MATCH (:Town {name: "Sheffield"})-[:FLIGHT]->(t:Town) RETURN t.name
MATCH (:Town {name: "Sheffield"})-[:FLIGHT]->(t:Town)-[:IN]->(c:Country) RETURN t.name, c.name
MATCH route=(:Town {name: "Sheffield"})-[:FLIGHT]->(:Town) RETURN route

MATCH (:Town {name: "Sheffield"})-[:FLIGHT]->(town:Town)-[:IN]->(country:Country) 
WITH country, collect(town) as towns RETURN country.name as country, size(towns) as number_of_towns ORDER BY size(towns) DESC LIMIT 10;

MATCH (:Town {name: "London"})-[:FLIGHT]->(t:Town)-[:IN]->(:Country {name: "South Africa"}) return t.name
MATCH route=(:Country {name: "United Kingdom"})<-[:IN]-(:Town)-[:FLIGHT]->(:Town)-[:IN]->(:Country {name: "South Africa"}) RETURN route

MATCH route=(:Country {name: "United Kingdom"})<-[:IN]-(:Town)-[:FLIGHT]->(:Town)-[:IN]->(:Country {name: "Indonesia"}) RETURN route
MATCH route=(:Country {name: "United Kingdom"})<-[:IN]-(:Town)-[:FLIGHT*1..2]->(:Town)-[:IN]->(:Country {name: "Indonesia"}) RETURN route LIMIT 6

MATCH (me:Person {name: "Ben Butler-Cole"}), (c:Country {name: "South Africa"})
CREATE (me)-[:LIKES]->(c)

MATCH (me:Person {name: "Ben Butler-Cole"})-[:LIKES]->(c:Country)
MATCH route = (:Town {name: "Manchester"})-[:FLIGHT*1..3]->(:Town)-[:IN]->(c)
RETURN route ORDER BY length(route) LIMIT 6

MATCH (:Person {name: "Ben Butler-Cole"})-[:LIKES]->(c1:Country)<-[:LIKES]-(p:Person)
RETURN p.name

MATCH (:Person {name: "Ben Butler-Cole"})-[:LIKES]->(c1:Country)<-[:LIKES]-(:Person)-[:LIKES]->(c2:Country)
RETURN c2.name

What city connects directly to most other cities?
MATCH route=(t:Town)-[FLIGHT]->(:Town)
WITH t, size(collect(route)) as flights
RETURN t.name, flights ORDER BY flights DESC LIMIT 10

Which country has most routes flying to India?
MATCH route=(c:Country) <-[:IN]- (:Town) -[:FLIGHT]-> (:Town) -[:IN]-> (:Country {name: "India"}) WITH c.name AS city, size(collect(route)) as routes RETURN city, routes ORDER BY routes DESC LIMIT 10
What about two-leg flights?

Which city has most routes flying to countries you like? (Where should you move to?)
MATCH route=(t:Town) -[:FLIGHT]-> (:Town) -[:IN]-> (c:Country) <-[:LIKES]-(me:Person {name: "Ben Butler-Cole"})
WHERE NOT (t)-[:IN]->(c)
WITH t.name AS city, size(collect(route)) as routes
RETURN city, routes ORDER BY routes DESC LIMIT 10

.
